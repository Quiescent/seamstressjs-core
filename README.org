#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: README
#+DATE: <2017-04-02 Sun>
#+AUTHOR: Edward John Steere
#+EMAIL: edward.steere@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.50 (Org mode 9.0.5)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 26.0.50 (<a href="http://orgmode.org">Org</a> mode 9.0.5)
#+LATEX_HEADER:

* Introduction 
Seamstress JS is a library that determines optimal seams of pixels and
removes them from or adds them to an image such that one may resize an
image while retaining the most important content.

* Tests
This repository contains a very comprehensive suite of tests.

** Unit Tests
Our philosophy is to test all the variations of the most simple
instances which illustrate some kind of functionality in the library.

You can run the unit tests with =npm test=.

** Test Coverage
We use nyc to analyse the coverage of our tests.  Just run =npm
test:full= from the root of the repository to run the tests and the
coverage will be printed to the console.  This command will include
property test based coverage in the report, whereas if you are running
the day to day, =npm test=, command then your report will only include
unit test coverage.

You can view the details regarding coverage in a report which is
published to a folder called =coverage= in the root of the repository.
Open the file called =index.html= to see the report.

* TODOs
** TODO [#A] Accept Data URI Image
Core should be able to accept a Data URI and convert it into an
indexible image prior to resizing it.

** TODO [#C] Rename Dummy Image
DummyImage is no longer a second class citizen.  It's become aparent
that it should actually be a core data type hence it should be called
"IndexibleImage".

** DONE [#A] Migrate Property Tests To Dev-Integrations
   CLOSED: [2017-06-04 Sun 12:11]
   :LOGBOOK:
   - CLOSING NOTE [2017-06-04 Sun 12:11] \\
     Migrated the tests and they're passing; however, they shouldn't be
     passing.  Adding a TODO to that effect in dev integrations.
   :END:
The property tests have to be in dev integrations because we want to
be able to depict the output of the tests when they go wrong instead
of spitting out pretty printed JSON.
